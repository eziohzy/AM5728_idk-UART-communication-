
#include <stdint.h>
#include "pru_uart_init.h"
#include <stdio.h>
#include <pru_cfg.h>
#include <pru_intc.h>
#include <rsc_types.h>
#include <pru_rpmsg.h>
#include "resource_table_0.h"
//#include "resource_table_empty.h"

#define CHAN_NAME			"rpmsg-pru"
#define CHAN_DESC			"Channel 30"
#define CHAN_PORT			30

#define TxSize 160
#define RxSize 64
#define PRU1



volatile register uint32_t __R30;
volatile register uint32_t __R31;

#define PRU1_PRU0_INTERRUPT (18)
//------------------------------------
/* Host-0 Interrupt sets bit 30 in register R31 */
#define HOST_INT			((uint32_t) 1 << 30)

/* The PRU-ICSS system events used for RPMsg are defined in the Linux device tree
 * PRU0 uses system event 16 (To ARM) and 17 (From ARM)
 * PRU1 uses system event 18 (To ARM) and 19 (From ARM)
 */
#define TO_ARM_HOST			16
#define FROM_ARM_HOST			17

/*
 * Using the name 'rpmsg-pru' will probe the rpmsg_pru driver found
 * at linux-x.y.z/drivers/rpmsg/rpmsg_pru.c
 */

/*
 * Used to make sure the Linux drivers are ready for RPMsg communication
 * Found at linux-x.y.z/include/uapi/linux/virtio_config.h
 */
#define VIRTIO_CONFIG_S_DRIVER_OK	4
//-------------------------------------------

void main(void)
 {

	unsigned char Txbuf[TxSize];
	unsigned char Rxbuf[RxSize];
	int i;
	pru_uart_initialize();
	//-------------------------
	struct pru_rpmsg_transport transport;
	uint16_t src, dst, len;
	volatile uint8_t *status;

	/* Allow OCP master port access by the PRU so the PRU can read external memories */
	CT_CFG.SYSCFG_bit.STANDBY_INIT = 0;

	/* Clear the status of the PRU-ICSS system event that the ARM will use to 'kick' us */
	CT_INTC.SICR_bit.STATUS_CLR_INDEX = FROM_ARM_HOST;

	/* Make sure the Linux drivers are ready for RPMsg communication */
	status = &resourceTable.rpmsg_vdev.status;
	while (!(*status & VIRTIO_CONFIG_S_DRIVER_OK));

	/* Initialize the RPMsg transport structure */
	pru_rpmsg_init(&transport, &resourceTable.rpmsg_vring0, &resourceTable.rpmsg_vring1, TO_ARM_HOST, FROM_ARM_HOST);

	/* Create the RPMsg channel between the PRU and ARM user space using the transport structure. */
	while (pru_rpmsg_channel(RPMSG_NS_CREATE, &transport, CHAN_NAME, CHAN_DESC, CHAN_PORT) != PRU_RPMSG_SUCCESS);
	//-----------------------------

	//__R31 = PRU1_PRU0_INTERRUPT+16;



	while(!__R31 & HOST_INT);
		/* Clear the event status */
		CT_INTC.SICR_bit.STATUS_CLR_INDEX = FROM_ARM_HOST;
		/* Receive all available messages, multiple messages can be sent per kick */
		while (pru_rpmsg_receive(&transport, &src, &dst, Txbuf, &len) == PRU_RPMSG_SUCCESS) ;
		pru_rpmsg_send(&transport, dst, src, Txbuf, len);
	while(1)
	{
		pru_uart_read(Rxbuf,RxSize);
		if(Rxbuf[RxSize-1]!=255)
			{
			__halt();
			}
		pru_rpmsg_send(&transport, dst, src, Rxbuf, RxSize);

		/* Check bit 30 of register R31 to see if the ARM has kicked us */
		while(!__R31 & HOST_INT);
			/* Clear the event status */
			CT_INTC.SICR_bit.STATUS_CLR_INDEX = FROM_ARM_HOST;
			/* Receive all available messages, multiple messages can be sent per kick */
			while (pru_rpmsg_receive(&transport, &src, &dst, Txbuf, &len) == PRU_RPMSG_SUCCESS) ;
			pru_rpmsg_send(&transport, dst, src, Txbuf, len);

		if(len==TxSize)
			pru_uart_write(Txbuf,TxSize);

	}
//	while(!((CT_UART.IIR_FCR & 0x2) == 0x2));

//	__R31 = PRU1_PRU0_INTERRUPT+16;

	__halt();
}
