#include "set_baud.h"

static int rate_to_constant(int baudrate) {
#define B(x) case x: return B##x
	switch(baudrate) {
		B(50);     B(75);     B(110);    B(134);    B(150);
		B(200);    B(300);    B(600);    B(1200);   B(1800);
		B(2400);   B(4800);   B(9600);   B(19200);  B(38400);
		B(57600);  B(115200); B(230400); B(460800); B(500000); 
		B(576000); B(921600); B(1000000);B(1152000);B(1500000);
	default: return 0;
	}
#undef B
}    

/* Open serial port in raw mode, with custom baudrate if necessary */
int set_baud(int fd, int rate)
{
	struct termios options;
	struct serial_struct serinfo;
	int speed = 0;

	speed = rate_to_constant(rate);
	if (speed == 0) {
		/* Custom divisor */
		serinfo.reserved_char[0] = 0;
		if (ioctl(fd, TIOCGSERIAL, &serinfo) < 0)
		{
			fprintf(stderr, "TIOCGSERIAL In set_baud failed\n" );
			return -1;
		}
		serinfo.flags &= ~ASYNC_SPD_MASK;
		serinfo.flags |= ASYNC_SPD_CUST;
		serinfo.flags |= ASYNCB_LOW_LATENCY;
		 serinfo.custom_divisor = (serinfo.baud_base + (rate / 2)) / rate;
		//serinfo.custom_divisor = serinfo.baud_base  / rate;
		if (serinfo.custom_divisor < 1) 
			serinfo.custom_divisor = 1;
		if (ioctl(fd, TIOCSSERIAL, &serinfo) < 0)
		{	
			fprintf(stderr, "TIOCSSERIAL In set_baud failed\n");
			return -1;
		}
		if (ioctl(fd, TIOCGSERIAL, &serinfo) < 0)
		{
			fprintf(stderr, "TIOCGSERIAL in set_baud failed\n" );
			return -1;
		}
		if (serinfo.custom_divisor * rate != serinfo.baud_base) {
			fprintf(stderr,"actual baudrate is %d / %d = %f",
			      serinfo.baud_base, serinfo.custom_divisor,
			      (float)serinfo.baud_base / serinfo.custom_divisor);
		}
	}

	fcntl(fd, F_SETFL, FNDELAY);
	tcgetattr(fd, &options);
	cfsetispeed(&options, speed ?: B38400);
	cfsetospeed(&options, speed ?: B38400);
	if (tcsetattr(fd, TCSANOW, &options) != 0)
	{
		fprintf(stderr, "TCSANOW in set_baud failed\n" );
		return -1;
	}

	return 0;

}
